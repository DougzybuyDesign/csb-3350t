{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad0e4a20.chunk.js","sourcesContent":["import React from \"react\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography';\n\nfunction InfoBox({ title, cases, total }) {\n  return (\n    <Card className=\"infoBox\">\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className=\"infoBox__cases\"> {cases}</h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\n\nconst Table = ({countries}) => {\n\n    return(\n        <div className=\"table\">\n            {\n                countries.map(({ country, cases }) => (\n                    <tr>\n                        <td>{country}</td>\n                        <td><strong>{cases}</strong></td>\n                    </tr>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Table;","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\"\n        }\n      }\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          }\n        }\n      }\n    ]\n  }\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nconst LineGraph = ({ casesType = \"cases\" }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data\n              }\n            ]\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React from \"react\";\nimport './App.css';\nimport {FormControl, Select, MenuItem, Card, CardContent} from \"@material-ui/core\";\nimport {useEffect, useState} from \"react\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n    const[countries, setCountries] = useState([ ]);\n    const[country, setCountry] = useState('worldwide');\n    const[countryInfo, setCountryInfo] = useState({});\n    const[tableData, setTableData] = useState([]);\n    const[mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n    const[mapZoom, setMapZoom] = useState(3);\n    const[mapCountries, setMapCountries] = useState([]);\n\n    useEffect(() => {\n        fetch('https://disease.sh/v3/covid-19/all')\n            .then(response => response.json())\n            .then(data => {\n                setCountryInfo(data);\n            })\n    }, []);\n\n    useEffect(() => {\n        const getCountriesData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/countries')\n                .then(response => response.json())\n                .then(data => {\n                    const countries = data.map((country) => (\n                        {\n                            name: country.country,\n                            value: country.countryInfo.iso2\n                        }\n                    ));\n                    const sortedData = sortData(data);\n                    setTableData(sortedData);\n                    setMapCountries(data);\n                    setCountries(countries);\n                })\n        }\n        getCountriesData();\n    }, []);\n\n    const onCountryChange = async (event) => {\n        const countryCode = event.target.value;\n        setCountry(countryCode);\n        const url = countryCode === 'worldwide' ?\n            'https://disease.sh/v3/covid-19/all' :\n            `https://disease.sh/v3/covid-19/countries/${countryCode}`\n        await fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            })\n    }\n\n    return (\n    <div className=\"App\">\n        <div className=\"app-left\">\n            <div className=\"app-header\">\n              <h1>Covid-19 tracker</h1>\n              <FormControl className=\"app-dropdown\">\n                   <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n                       <MenuItem value='worldwide'>Worldwide</MenuItem>\n                       {\n                           countries.map(country => (\n                               <MenuItem value={country.value}>{country.name}</MenuItem>\n                           ))\n                       }\n                   </Select>\n              </FormControl>\n            </div>\n            <div className=\"app-stats\">\n                <InfoBox title=\"Coronavirus cases\" total={countryInfo.cases} cases={countryInfo.todayCases} />\n                <InfoBox title=\"Recovered\" total={countryInfo.recovered} cases={countryInfo.todayRecovered} />\n                <InfoBox title=\"Deaths\" total={countryInfo.deaths} cases={countryInfo.todayDeaths}/>\n            </div>\n            <Map center={mapCenter} zoom={mapZoom} countries={mapCountries}/>\n        </div>\n        <Card className=\"app-right\">\n            <CardContent>\n                <h3>Live cases by country</h3>\n                    <Table countries={tableData} />\n                <h3>Worldwide new cases</h3>\n                    <LineGraph />\n            </CardContent>\n        </Card>\n    </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}